trigger:
  branches:
    include:
      - develop

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Tests
    displayName: "Run Linter, Tests, and SonarCloud Analysis"
    jobs:
      - job: Setup
        displayName: "Set up environment and install dependencies"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
          
          # Instala dependencias y guarda como un artifact compartido
          - script: |
              python -m pip install --upgrade pip
              pip install -r task_manager/requirements.txt
            displayName: "Install dependencies"

          # Publica el directorio de `site-packages` como un artefacto para reutilizar en los otros trabajos
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(pip show flask | grep Location | cut -d ' ' -f 2)"  # Publica `site-packages`
              artifact: 'python-env'

      - job: Lint
        displayName: "Run linter"
        dependsOn: Setup  # Este trabajo depende del anterior para las dependencias
        steps:
          - download: current
            artifact: 'python-env'

          # Instalar `flake8` ya que no est치 incluido en requirements.txt
          - script: |
              pip install flake8
              flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            displayName: "Run flake8 linter"

      - job: Tests
        displayName: "Run tests"
        dependsOn: Setup
        steps:
          - download: current
            artifact: 'python-env'

          - script: |
              pytest --junitxml=task_manager/test-results.xml --cov=task_manager
            displayName: "Run tests and generate coverage report"

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: '**/task_manager/test-results.xml'
              testRunTitle: 'Tests for Develop'

          # Publica los resultados de cobertura para SonarCloud
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'task_manager/test-results.xml'
              artifact: 'test-results'

      - job: SonarCloud
        displayName: "Analyze code with SonarCloud"
        dependsOn: [Setup, Tests]  # Depende de ambos trabajos previos
        steps:
          - download: current
            artifact: 'python-env'
          
          - download: current
            artifact: 'test-results'

          # Prepara el entorno para el an치lisis de SonarCloud
          - task: SonarCloudPrepare@2
            inputs:
              SonarCloud: 'SonarCloud'
              organization: 'unisabaneta'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'unisabaneta_sag-unisabaneta'
              cliProjectName: 'SAG-UNISABANETA'
              cliSources: '.'
              extraProperties: |
                sonar.python.coverage.reportPaths=task_manager/test-results.xml

          # Ejecuta el an치lisis de SonarCloud
          - task: SonarCloudAnalyze@2
            displayName: "Run SonarCloud analysis"

          # Publica los resultados del an치lisis de SonarCloud
          - task: SonarCloudPublish@2
            displayName: "Publish SonarCloud results"
